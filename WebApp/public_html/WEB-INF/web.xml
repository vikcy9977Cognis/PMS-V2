<?xml version = '1.0' encoding = 'windows-1252'?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5" xmlns="http://java.sun.com/xml/ns/javaee">
    <display-name>PMSWebApp</display-name>
    <description>PMS Web Application</description>
    
    <!--
      - Location of the Log4J config file, for initialization and refresh checks.
      - Applied by Log4jConfigListener.
    -->
    <!--
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/log4j.properties</param-value>
    </context-param>
    -->
    
    <!--
      - Location of the XML file that defines the root application context.
      - Applied by ContextLoaderServlet.
        - "/WEB-INF/applicationContext-jdbc.xml" for the JDBC one.
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>	
        <param-value>/WEB-INF/applicationContext-jdbc.xml</param-value>
    </context-param>
     <context-param>
        <param-name>uploadFilePath</param-name>
        <param-value>/ApplTop/PMS/ATTACHMENT</param-value>
    </context-param>
    <!--
      - Configures Log4J for this web app.
      - As this context specifies a context-param "log4jConfigLocation", its file path
      - is used to load the Log4J configuration, including periodic refresh checks.
      -
      - Would fall back to default Log4J initialization (non-refreshing) if no special
      - context-params are given.
      -
      - Exports a "web app root key", i.e. a system property that specifies the root
      - directory of this web app, for usage in log file paths.
      - This web app specifies "petclinic.root" (see log4j.properties file).
    -->
    <!-- Leave the listener commented-out if using JBoss -->
    <!--
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    -->
    
    <!--
      - Loads the root application context of this web app at startup,
      - by default from "/WEB-INF/applicationContext.xml".
        - Note that you need to fall back to Spring's ContextLoaderServlet for
        - J2EE servers that do not follow the Servlet 2.4 initialization order.
        -
        - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
        - to access it anywhere in the web application, outside of the framework.
        -
        - The root context is the parent of all servlet-specific contexts.
        - This means that its beans are automatically available in these child contexts,
        - both for getBean(name) calls and (external) bean references.
    -->
    <filter>
        <filter-name>JpsFilter</filter-name>
        <filter-class>oracle.security.jps.ee.http.JpsFilter</filter-class>
        <init-param>
            <param-name>enable.anonymous</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>JpsFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.rclgroup.dolphin.web.ui.pms.PmsServletContextListener</listener-class>
    </listener>
    <!--
    <listener>
        <listener-class>    
          org.springframework.web.context.request.RequestContextListener     
        </listener-class>
    </listener>
    -->
    
    <servlet>
        <servlet-name>RrcGenericSrv</servlet-name>
        <servlet-class>com.rclgroup.dolphin.web.common.RrcGenericSrv</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>RrcGenericLinkMenuSrv</servlet-name>
        <servlet-class>com.rclgroup.dolphin.web.common.RrcGenericLinkMenuSrv</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>RrcStandardSrv</servlet-name>
        <servlet-class>com.rclgroup.dolphin.web.common.RrcStandardSrv</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>RrcGenericSrv</servlet-name>
        <url-pattern>/RrcGenericSrv</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>RrcGenericLinkMenuSrv</servlet-name>
        <url-pattern>/RrcGenericLinkMenuSrv</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>RrcStandardSrv</servlet-name>
        <url-pattern>/RrcStandardSrv</url-pattern>
    </servlet-mapping>
    <session-config>
        <session-timeout>35</session-timeout>
    </session-config>
    <mime-mapping>
        <extension>html</extension>
        <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>txt</extension>
        <mime-type>text/plain</mime-type>
    </mime-mapping>
   
    <!--
      - Reference to RCL datatasource.
      - Only needed if not using a local DataSource but a JNDI one instead.
    -->
   <!-- <resource-ref>
        <res-ref-name>jdbc/RCLJNDI</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>        
    </resource-ref>
    <resource-ref>        
        <res-ref-name>jdbc/vasconn</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>-->
    <welcome-file-list>
        <!-- <welcome-file>RrcGenericSrv?service=common.RcmLoginSvc</welcome-file> -->
        <!-- <welcome-file>RrcGenericSrv?service=common.RcmLoginSvc&amp;select=ui.dnd.DndMonitoringReportSvc</welcome-file> -->
         <welcome-file>RrcGenericSrv?service=common.RcmLoginSvc&amp;select=ui.pms.PmsHomeSvc</welcome-file>
    </welcome-file-list>

</web-app>
